<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.blind_mode
{
    switch(room)
    {
        case rm_main_menu:
            if keyboard_check_pressed(ord('1')) // tryhard story mode
            {
                global.hardmode = true;
                room_goto(rm_story_mode_menu);
            }
            if keyboard_check_pressed(ord('2')) // reg story mode
            {
                global.hardmode = false;
                room_goto(rm_story_mode_menu);
            }
            if keyboard_check_pressed(ord('3')) // versus menu
            {
                room_goto(rm_versus_menu);
            }
            if keyboard_check_pressed(ord('4')) // achievements
            {
                room_goto(rm_achievements);
            }
            if keyboard_check_pressed(ord('5')) // training
            {
                room_goto(rm_training);
            }
            if keyboard_check_pressed(ord('6')) // instructions
            {
                room_goto(rm_instructions);
            }
            if keyboard_check_pressed(ord('7')) // credits
            {
                room_goto(rm_credits);
            }
            if keyboard_check_pressed(ord('8')) // options
            {
                room_goto(rm_options);
            }
            if keyboard_check_pressed(ord('9')) // quit
            {
                game_end();
            }
            break;
        case rm_story_mode_menu:
            if keyboard_check_pressed(vk_backspace) // back
            {
                room_goto(rm_main_menu);
            }
            if keyboard_check_pressed(ord('1')) // story map
            {
                room_goto(rm_story_map);
            }
            
            if keyboard_check_pressed(ord('2'))
            {
                room_goto(rm_avatar_creation);
            }
        
            break;
        case rm_story_map:
            if keyboard_check_pressed(vk_backspace) // back
            {
                room_goto(rm_main_menu);
            }
            if keyboard_check_pressed(ord('0')) // tutorial
            {
                if not global.cutscene1
                {
                    global.cutscene1 = true;
                    global.curr_cutscene = 1;
                    global.curr_cutscene_dest = rm_story_tutorial
                    room_goto(rm_cutscenes);
                } else
                    room_goto(rm_story_tutorial);
            }
            if keyboard_check_pressed(ord('1')) // stage 1
            {
                if not global.cutscene1
                {
                    var dest;
                    if global.first_tutorial_done global.curr_cutscene_dest = rm_story_level1;
                    else global.curr_cutscene_dest = rm_story_tutorial
                    global.curr_cutscene = 1;
                    global.cutscene1 = true;
                    room_goto(rm_cutscenes);
                } else
                    if global.first_tutorial_done
                        room_goto(rm_story_level1);
                    else room_goto(rm_story_tutorial);
            }
            if keyboard_check_pressed(ord('2') and global.beat_stage_one)
            {
                if not global.cutscene2
                {
                    global.curr_cutscene_dest = rm_story_level2;
                    global.curr_cutscene = 2;
                    global.cutscene2 = true;
                    room_goto(rm_cutscenes);
                } else room_goto(rm_story_level2);
            }
            if keyboard_check_pressed(ord('3') and global.beat_stage_two)
            {
                if not global.cutscene3
                {
                    global.curr_cutscene_dest = rm_story_level3;
                    global.curr_cutscene = 3;
                    global.cutscene3 = true;
                    room_goto(rm_cutscenes);
                } else room_goto(rm_story_level3);
            }
            break;
            
        case rm_versus_menu:
            if keyboard_check_pressed(vk_backspace) // back
            {
                room_goto(rm_main_menu);
            }
            if keyboard_check_pressed(ord('2')) // battle
            {
                room_goto(rm_versus_level);
            }
            break;
        
        case rm_achievements:
            if keyboard_check_pressed(vk_backspace) // back
            {
                room_goto(rm_main_menu);
            }
            break;
        case rm_instructions:
            if keyboard_check_pressed(vk_backspace) // back
            {
                room_goto(rm_main_menu);
            }
            break;
        case rm_credits:
            if keyboard_check_pressed(vk_backspace) // back
            {
                room_goto(rm_main_menu);
            }
            break;
        case rm_options:
            if keyboard_check_pressed(vk_backspace) // back
            {
                room_goto(rm_main_menu);
            }
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
