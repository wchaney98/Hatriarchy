<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Achievements 
// First track if tutorial was done
global.first_tutorial_done = false;
// And see if hardmode is on
global.hardmode = false;
// Other globals
global.curr_cutscene = 0;
global.curr_cutscene_dest = undefined;
global.cutscene1 = false;
global.cutscene2 = false;
global.cutscene2_alt = false;
global.cutscene3 = false;

global.beat_stage_one = true;
global.beat_stage_two = true;
global.beat_stage_three = true;

// Options menu
global.one_hand_mode = false;
global.blind_mode = false;

// Avatar choice
global.gender = "male";
global.race = "asian";

// Set audio listener pos
audio_listener_position(room_width / 2, room_height / 2, 0);
audio_listener_orientation(0, -1, 0, 0, 0, -1);

// Check for gamepad
global.gp = 0;
var gp_num = gamepad_get_device_count();
for (var i = 0; i &lt; gp_num; i++;)
{
    if gamepad_is_connected(i)
    {
       global.gp = i;
       break;
    }
}

global.current_room = room;

boss1_perfect = false; // A good start
boss1_perfect_notif = false;
boss2_perfect = false; // Not half bad
boss2_perfect_notif = false;
boss3_perfect = false; // Another one
boss3_perfect_notif = false;
all_hat_tokens = false; // gg ez
all_hat_tokens_notif = false;
track_total_vs_games = 0; // Friends or foes
play_ten_vs_games = false;
play_ten_vs_games_notif = false;
track_total_vats_use = 0; 
use_vats_hundred_times = false; // Minor headache
use_vats_hundred_times_notif = false;
use_vats_5hundred_times = false; // Brainpower
use_vats_5hundred_times_notif = false;
dealt_thousand_dmg = false; // Hurtlocker
dealt_thousand_dmg_notif = false;
total_dmg_dealt = 0;

// Hat tokens
boss1_hat_token = false;
boss1_hat_token_notif = false;
boss2_hat_token = false;
boss2_hat_token_notif = false;
boss3_hat_token = false;
boss3_hat_token_notif = false;

achievement_triggered = false;

notif_x_curr = 0;
notif_y_curr = 0;
notif_x_dest = room_width / 2;
notif_y_dest = room_height - 100;

if room == rm_init room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set gamepad back to normal vibration
gamepad_set_vibration(global.gp, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>play_ten_vs_games = track_total_vs_games &gt;= 10;
use_vats_hundred_times = track_total_vats_use &gt;= 100;
use_vats_5hundred_times = track_total_vats_use &gt;= 500;
dealt_thousand_dmg = total_dmg_dealt &gt;= 1000;

if global.current_room != room
{
    global.current_room = room;
    audio_stop_all();
    switch(room)
    {
        case rm_main_menu:
            if global.blind_mode audio_play_sound(snd_blind_main_menu, 1, false);
            break;
        case rm_story_mode_menu:
            if global.blind_mode audio_play_sound(snd_blind_story_mode, 1, false);
            break;
        case rm_instructions:
            if global.blind_mode audio_play_sound(snd_blind_instructions, 1, false);
            break;
        case rm_achievements:
        case rm_options:
        case rm_credits:
            if global.blind_mode audio_play_sound(snd_blind_backspace, 1, false);
            break;
        case rm_versus_menu:
            if global.blind_mode audio_play_sound(snd_blind_versus, 1, false);
            break;
        case rm_story_map:
            if global.blind_mode audio_play_sound(snd_blind_story_mode_map, 1, false);
            break;
        case rm_cutscenes:
            if global.curr_cutscene == 1 audio_play_sound(snd_cutscene_1, 1, false);
            if global.curr_cutscene == 2 audio_play_sound(snd_cutscene_2, 1, false);
            if global.curr_cutscene == 2.5 audio_play_sound(snd_cutscene_2_5, 1, false);
            if global.curr_cutscene == 3 audio_play_sound(snd_cutscene_3, 1, false);
            break;
        case rm_story_tutorial:
            if global.blind_mode audio_play_sound(snd_blind_tutorial, 1, false);
            break;
    }
}    

global.current_room = room;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_texture_flush();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw notification when player gets an achievement or hat token
// psuedo: if (achievement condition met, false -&gt; true)
//            draw achievement notification (lerps up from bottom)

draw_set_font(test_font);
draw_set_halign(fa_middle);
draw_set_valign(fa_middle);
draw_set_color(c_yellow);

if scr_check_and_draw_ach_notif(boss1_perfect, "A Good Start", boss1_perfect_notif)
    boss1_perfect_notif = true;
if scr_check_and_draw_ach_notif(boss2_perfect, "Not Half Bad", boss2_perfect_notif)
    boss2_perfect_notif = true;
if scr_check_and_draw_ach_notif(boss3_perfect, "Another One", boss3_perfect_notif)
    boss3_perfect_notif = true;
if scr_check_and_draw_ach_notif(all_hat_tokens, "Wow!", all_hat_tokens_notif)
    all_hat_tokens_notif = true;
if scr_check_and_draw_ach_notif(play_ten_vs_games, "Friends or Foes", play_ten_vs_games_notif)
    play_ten_vs_games_notif = true;
if scr_check_and_draw_ach_notif(use_vats_hundred_times, "Minor Headache", use_vats_hundred_times_notif)
    use_vats_hundred_times_notif = true;
if scr_check_and_draw_ach_notif(use_vats_5hundred_times, "Brainpower", use_vats_5hundred_times_notif)
    use_vats_5hundred_times_notif = true;
if scr_check_and_draw_ach_notif(dealt_thousand_dmg, "Hurtlocker", dealt_thousand_dmg_notif)
    dealt_thousand_dmg_notif = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
