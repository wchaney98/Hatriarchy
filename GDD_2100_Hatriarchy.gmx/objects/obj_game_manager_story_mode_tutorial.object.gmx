<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.first_tutorial_done = true;
movement1_learned = false;
left_pressed = false;
right_pressed = false;

movement2_learned = false;
jump_pressed = false;
crouch_pressed = false;

attacking_learned = false;
low_attack_done = false;
mid_attack_done = false;
high_attack_done = false;

blocking_learned = false;
low_block_done = false;
mid_block_done = false;
high_block_done = false;

vats_learned = false;
vats_done = false;

demonstrate_practice_done = false;

tutorial_finished = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if not movement1_learned
{
    if (obj_player.player_one_left_down) left_pressed = true;
    if (obj_player.player_one_right_down) right_pressed = true;
    if left_pressed and right_pressed movement1_learned = true;

    obj_tut_gif_player.sprite_index = spr_tut_movement1
    obj_tut_gif_player.image_speed = 0.2;
}
if not movement2_learned and movement1_learned
{
    if (obj_player.player_one_jump_prs) jump_pressed = true;
    if (obj_player.player_one_crouch_rls) crouch_pressed = true;
    if jump_pressed and crouch_pressed movement2_learned = true;
    
    obj_tut_gif_player.sprite_index = spr_tut_movement2
}
if not attacking_learned and movement2_learned
{
    if (obj_player.attack_loc == LOC_LOW) low_attack_done = true;
    if (obj_player.attack_loc == LOC_MID) mid_attack_done = true;
    if (obj_player.attack_loc == LOC_HIGH) high_attack_done = true;
    if low_attack_done and mid_attack_done and high_attack_done attacking_learned = true;
    
    obj_tut_gif_player.sprite_index = spr_tut_attacking
}
if not blocking_learned and attacking_learned
{
    if (obj_player.block_loc == LOC_LOW) low_block_done = true;
    if (obj_player.block_loc == LOC_MID) mid_block_done = true;
    if (obj_player.block_loc == LOC_HIGH) high_block_done = true;
    if low_block_done and mid_block_done and high_block_done blocking_learned = true;

    obj_tut_gif_player.sprite_index = spr_tut_blocking
}
if not vats_learned and blocking_learned 
{
    if obj_player.player_one_confirm_action and obj_player.vats_selection_finalized vats_done = true;
    if vats_done vats_learned = true;

    obj_tut_gif_player.sprite_index = spr_tut_vats
}

if vats_learned and not demonstrate_practice_done
{
    with (obj_tut_gif_player)
    {
        instance_destroy();
    }
    demonstrate_practice_done = true;
    tutorial_finished = true;
}

if tutorial_finished and keyboard_check_pressed(vk_escape) room_goto(rm_story_mode_menu);
if (obj_player.x &lt; 0 or obj_player.x &gt; room_width) room_goto(rm_story_level1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(test_font);
draw_set_halign(fa_middle);
draw_set_valign(fa_middle);
draw_set_color(c_yellow);

if not movement1_learned
{
    draw_text(room_width / 2, room_height / 2, "Move left/right using the arrow keys");    
}
if not movement2_learned and movement1_learned
{
    draw_text(room_width / 2, room_height / 2, "Jump with the up arrow key or space... Crouch with the down arrow");
}
if not attacking_learned and movement2_learned
{
    draw_text(room_width / 2, room_height / 2 - 40, "A: Low attack (quick and light)");
    draw_text(room_width / 2, room_height / 2, "S: Mid attack (slow and heavy)");
    draw_text(room_width / 2, room_height / 2 + 40, "D: hold to channel a range attack");
}
if not blocking_learned and attacking_learned
{
    draw_text(room_width / 2, room_height / 2 - 40, "Z: Block attacks on the lower third of your savior");
    draw_text(room_width / 2, room_height / 2, "X: Block attacks on the middle third of your savior");
    draw_text(room_width / 2, room_height / 2 + 40, "C: Block attacks on the upper third of your savior");
}
if not vats_learned and blocking_learned 
{
    draw_text(room_width / 2, room_height / 2 - 40, "Fill yellow action bar by dealing damage");
    draw_text(room_width / 2, room_height / 2, "Ctrl: Enter/exit Mindblast mode (at least 1 yellow bar filled) Note: This pauses time");
    draw_text(room_width / 2, room_height / 2 + 40, "Shift: Change targets or change attack location");
    draw_text(room_width / 2, room_height / 2 + 80, "A: Confirm target selection or attack location");
}

if tutorial_finished 
{
    draw_set_color(c_green);
    draw_text(room_width / 2, room_height / 4 - 40, "Tutorial Complete!");
    draw_text(room_width / 2, room_height / 4, "Press escape to return to stage selection");
}

draw_set_color(c_green);
draw_text(room_width / 2, room_height / 4 - 80, "Walk off the level at anytime to goto stage 1");

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
