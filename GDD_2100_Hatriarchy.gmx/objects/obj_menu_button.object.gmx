<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_button</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text = "UNSET";
action = undefined;
disabled = false;
prev_room = undefined;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (action)
{
    /*
        MAIN MENU AND RECURRING
    */
    
    case -1:
        // Go back go previous menu
        room_goto(prev_room);
        break;
    case 0:
        // Goto trianing room
        room_goto(rm_training);
        break;
    case 1:
        // Goto story mode menu (and disable hard mode)
        global.hardmode = false;       
        room_goto(rm_story_mode_menu);
        break;
    case 2:
        // Goto instructions page       
        room_goto(rm_instructions);
        break;  
    case 3:
        // Goto credits page
        
        room_goto(rm_credits);
        break;
    case 4:
        // Quit game
        game_end();
        break;
    case 5:
        // Goto versus mode menu
        room_goto(rm_versus_menu);
        break;
    case 6:
        // Goto achievements screen
        room_goto(rm_achievements);
        break;       
    case 7:
        // Enable hardmode and goto storymode
        global.hardmode = true;
        room_goto(rm_story_mode_menu);
        break;
    case 8:
        // Goto options menu
        room_goto(rm_options);
        break;
        
    /*
        STORY MODE MENU
    */
    
    case 10:
        // Start story TODO: if avatar not created
        room_goto(rm_avatar_creation);
        break;
    case 11:
        // Goto savior screen
        room_goto(rm_avatar_creation);
        break;
        
    /*
        AVATAR CREATION
    */
    
    case 20:
        // Confirm avatar and goto story mode map
        if room = rm_avatar_creation
        {
            global.gender = obj_avatar_manager.curr_gender_text;
            global.race = obj_avatar_manager.curr_race_text;
        }
        room_goto(rm_story_map);
        break;
        
    /*
        STORY MODE MAP
    */
    
    case 30:
        // Goto first level which queues tutorial
        room_goto(rm_story_level1);
        break;
        
    /*
        VERSUS MODE MAP
    */
    
    case 40:
        // Goto versus area
        room_goto(rm_versus_level);
        break;
}
audio_play_sound(snd_menu_click, 1, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_font(test_font);
draw_set_halign(fa_middle);
draw_set_valign(fa_middle);

if (!disabled)
{
    image_alpha = 1.0;
    draw_set_color((c_black));    
}
else
{
    image_alpha = 0.5;
    draw_set_color(c_gray);
}

draw_text(x, y, text);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
